import * as assert from 'uvu/assert';
import {base58, base58check} from '../src/utils/base58';
import {bufferToNumber} from '../src/utils/buffer';
import * as struct from '../src/struct';
import {describe} from './setup/env';

describe('struct', (it) => {
  it('unpacks correctly', async () => {
    const tests = [
      {
        buffer: new Uint8Array([
          // Address:
          0x8d, 0xb9, 0x7c, 0x7c, 0xec, 0xe2, 0x49, 0xc2, 0xb9, 0x8b, 0xdc,
          0x02, 0x26, 0xcc, 0x4c, 0x2a, 0x57, 0xbf, 0x52, 0xfc,
          // Amount:
          0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x84, 0x80,
          // AssetID:
          0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48,
          0xb7, 0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70,
          0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,
          // Nonce:
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        ]),
        format: 'auiu',
        result: [
          new Uint8Array([
            0x8d, 0xb9, 0x7c, 0x7c, 0xec, 0xe2, 0x49, 0xc2, 0xb9, 0x8b, 0xdc,
            0x02, 0x26, 0xcc, 0x4c, 0x2a, 0x57, 0xbf, 0x52, 0xfc,
          ]),
          2_000_000n,
          new Uint8Array([
            0xdb, 0xcf, 0x89, 0x0f, 0x77, 0xf4, 0x9b, 0x96, 0x85, 0x76, 0x48,
            0xb7, 0x2b, 0x77, 0xf9, 0xf8, 0x29, 0x37, 0xf2, 0x8a, 0x68, 0x70,
            0x4a, 0xf0, 0x5d, 0xa0, 0xdc, 0x12, 0xba, 0x53, 0xf2, 0xdb,
          ]),
          0n,
        ],
      },
    ];

    for (const {buffer, format, result} of tests) {
      assert.equal(struct.unpack(format, buffer), result);
    }
  });
});
